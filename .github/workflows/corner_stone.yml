name: Corner_stone

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'corner_stone_infra_project/**'
  pull_request:
    branches:
      - main
    paths:
      - 'corner_stone_infra_project/**'
  workflow_dispatch:

jobs:
  security:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./corner_stone_infra_project
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure Terraform credentials
        run: |
          mkdir -p ~/.terraform.d
          cat > ~/.terraform.d/credentials.tfrc.json <<EOF
          {
            "credentials": {
              "app.terraform.io": {
                "token": "${{ vars.TF_CLOUD_TOKEN }}"
              }
            }
          }
          EOF

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: echo "Terraform plan failed"

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve

      - name: Set output
        if: steps.apply.outcome == 'success'
        run: echo "::set-output name=apply_status::success"

  deploy:
    needs: security
    uses: Amits64/shared_library/.github/workflows/terraform-setup.yml@main
    with:
      working-directory: "./corner_stone_infra_project"
      aws-region: ${{ vars.AWS_REGION }}
      tf-cloud-token: ${{ vars.TF_CLOUD_TOKEN }}
      aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
